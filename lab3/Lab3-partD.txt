.include "m2560def.inc"
.def first_in_queue = r15
.def temp = r16
.def led = r17
.def counter =r18
.def keydown = r19
.def flash_time = r20
.def is_showing =r21
.def num = r22;num in Queue
.def dsp = r23;
.macro clear
	ldi YL,low(@0)
	ldi YH,high(@0)
	clr temp
	st Y+,temp
	st Y,temp
.endmacro 


.dseg
mlsecond_Counter:
	.byte 2
second_Counter:
.byte 2
queue:
.byte 32


.cseg

jmp start

.org INT0addr
	jmp INT0F
.org INT1addr
	jmp INT1F
.org  OVF0addr
	jmp Time0OVR
INT0F:
	push temp
	in temp,SREG
	push temp; save the current status

	cpi keydown,1
	breq endINT
	lsl led
	inc counter;count the numers of keydown
	;out PORTC,led
	ldi keydown,1
	clear mlsecond_Counter
	rjmp endINT
INT1F:
	push temp
	in temp,SREG
	push temp; save the current status

	cpi keydown,1
	breq endINT
	ldi keydown,1
	lsl led
	inc led
	;out PORTC,led
	inc counter
	clear mlsecond_Counter
	rjmp endINT
endINT:
	pop temp
	out SREG,temp
	pop temp
	reti

Time0OVR:
	push temp
	in temp,SREG
	push temp

mlsecond_compare:
	cpi keydown,1
	brne second_compare;do nothing
	lds r24, mlsecond_Counter
	lds r25, mlsecond_Counter+1
	adiw r24:r25,1
	;SAVE the pattern before debouncing
	cpi counter,8
	brlt debouncing
	st X+,led
	inc num
	clr counter
	cpi num,1
	breq load_first_pattern
	rjmp debouncing
load_first_pattern:
	ldi temp,1
    mov first_in_queue,temp
	ld dsp,z
debouncing:
	;check 50milisecond
	cpi r24,low(390);7812/20=390 but is not enough, we think the button is little bit disorder
	ldi temp,high(390)
	cpc r25,temp
	brne not_fifty_mlsecond_yet
	ldi keydown,0
	clear mlsecond_Counter
	
second_compare:	
	cpi num,1;compare to the number in queue
	brlt endTimer0OVR
	;ldi	keydown,1
	;if counter==8
	;ld dsp,z;here is the problem
	;out PORTC,dsp
	cpi flash_time,6
	brge flash_done
	lds r24,second_Counter
	lds r25,second_Counter+1
	adiw r24:r25,1
	;check 1 second three time
	cpi	num,2;two in queue
	brge half_second_flash
	;check 1 second three time
one_second_flash:
	cpi r24,low(7812);1 sec
	ldi temp,high(7812)
	cpc r25,temp
	brlt not_second_yet
	rjmp branch_for_second
half_second_flash:
	cpi r24,low(3906);0.5 sec
	ldi temp,high(3906)
	cpc r25,temp
	brlt not_second_yet
branch_for_second:
	clear second_Counter
	inc flash_time
	cpi is_showing,1
	breq hide
	ldi is_showing,1
	;out PORTC,dsp

endTimer0OVR:
	pop temp
	out SREG,temp
	pop temp
	reti
 
not_fifty_mlsecond_yet:
	sts mlsecond_Counter,r24
	sts mlsecond_Counter+1,r25
	rjmp second_compare
not_second_yet:
	sts second_Counter,r24
	sts second_Counter+1,r25
	cpi is_showing,1
	brne display_nothing
	out PORTC,dsp
	rjmp endTimer0OVR
display_nothing:
	ldi temp,0
	out PORTC,temp;current pattern
	rjmp endTimer0OVR

 flash_done:
	;clr r0

	clr dsp
	out PORTC,dsp
	mov r24,zl
	mov r25,zh
	adiw r24:r25,1
	mov zl,r24
	mov zh,r25
	dec num

	;clr counter
	clr flash_time
	clear second_Counter
	cpi num,1
	brge load_new_pattern
	;if there is no more to display
	ldi temp,1
	mov first_in_queue,temp
	rjmp endTimer0OVR

hide:
	clr is_showing
	rjmp endTimer0OVR
load_new_pattern:
    clr temp
	mov first_in_queue,temp
	ld dsp,z
	rjmp endTimer0OVR

start:
;clr r0
;clr swap_temp
ldi temp,low(RAMEND)
out SPL,temp
ldi temp,high(RAMEND)
out SPH, temp

clr led;
clr dsp
clr counter;
clr num

ser temp
out DDRC,temp
out PORTC,dsp
sei
;setting button interupt
ldi temp,(2<<ISC00)
sts EICRA,temp
in temp,EIMSK
ori temp,(1<<INT0)
out EIMSK, temp
 sei

ldi temp,(2<<ISC00)
sts EICRA,temp
in temp,EIMSK
ori temp,(1<<INT1)
out EIMSK, temp

;setting timer
ldi temp,0
out TCCR0A,temp
ldi temp,2;normal speed mod
out TCCR0B,temp
ldi temp,(1<<TOIE0);
sts TIMSK0,temp 
;

ldi zl,low(queue);display
ldi zh,high(queue)
ldi xl,low(queue);store
ldi xh,high(queue)

sei
loop:
in temp,PIND
andi temp,0b00000011
cpi temp,0
breq start
rjmp loop




