;
; AssemblerApplication1.asm
;
; Created: 17/05/2017 1:22:00 PM
; Author : Comp2121
;
.include "m2560def.inc"
.def temp = r16
.def MOTOR_COUnter = r17
.def display_counter = r18
.def led =r19
.def result_temp = r20
.def lcd_display =r21
.equ lcd_base = 0b00110000

.macro do_lcd_command
	ldi r16, @0
	rcall lcd_command
	rcall lcd_wait
.endmacro

.macro load_lcd_data
	mov r16, @0
	rcall lcd_data
	rcall lcd_wait
.endmacro



.macro clear
	ldi YL,low(@0)
	ldi YH,high(@0)
	clr temp
	st Y+,temp
	st Y,temp
.endmacro 


.dseg
halfsecond: .byte 2

.cseg
rjmp start
.org INT2addr
	rjmp MOTOR
.org OVF0addr
	jmp Time3OVR



MOTOR:
	in temp,SREG
	push temp
	inc motor_counter;
END_MOTOR:
	pop temp
	OUT SREG,TEMP 
reti



Time3OVR:
	in temp, SREG
	push temp
	push YL
	push YH
	push r24 ;counter increment
	push r25

	lds r24,halfsecond;low
	lds r25,halfsecond+1
	adiw r25:r24,1
	
	cpi r24,low(1953);7812/4
	ldi temp,HIGH(1953)
	cpc r25, temp
	brne DO_NOTHING
	

	inc display_counter;
	cpi display_counter,2
	brne RESET_MOTOR

	mov led,MOTOR_COUnter
	out PORTc,led
	;display to speed lcd
	mov result_temp,motor_counter	
	rcall show_result
	clr display_counter
	clr MOTOR_COUnter;
	clear halfsecond
	clr r24
	clr r25
	rjmp DO_NOTHING
RESET_MOTOR:

	clr MOTOR_COUnter;
	clear halfsecond
	clr r24
	clr r25
DO_NOTHING:
	;OUT PORTc,led
	
	sts halfsecond,r24;low
	sts halfsecond+1,r25
	POP R25
	POP R24
	POP YH
	POP YL
	POP TEMP
	OUT SREG,TEMP
reti


start:

	ldi TEMP,HIGH(RAMEND)
	OUT SPH,TEMP
	ldi TEMP,LOW(RAMEND)
	OUT SPL,TEMP
	clr led
	clr display_counter

	SER TEMP
	OUT DDRC ,TEMP
	LDI led,0X00
	OUT PORTC,led

	;SET THE TIMER
	clear halfsecond
	ldi temp,0
	out TCCR0A,temp
	ldi temp,2
	out TCCR0B,temp
	ldi temp,(1<<TOIE0);
	sts TIMSK0,temp;
	sei



	;set teh motor
	ldi temp,(2<<ISC20)
	sts EICRA,TEMP
	in temp,EIMSK
	ori temp,(1<<INT2)
	OUT EIMSK,TEMP


	;TURN ON LCD
	ser temp;SET AS OUTPUT PORT
	out DDRF, temp
	out DDRA, temp
	;SHOW NOT THING
	clr temp
	out PORTF, temp
	out PORTA, temp

	;set up display	
	do_lcd_command 0b00111000 ; 2x5x7
	rcall sleep_5ms
	do_lcd_command 0b00111000 ; 2x5x7
	rcall sleep_1ms
	do_lcd_command 0b00111000 ; 2x5x7
	do_lcd_command 0b00111000 ; 2x5x7
	do_lcd_command 0b00001000 ; display off?
	do_lcd_command 0b00000001 ; clear display
	do_lcd_command 0b00000110 ; increment, no display shift
	do_lcd_command 0b00001110 ; Cursor on, bar, no blink
	do_lcd_command 0b10101000;CHANGE THE DD RAM ADDRESS to second line


end:
rjmp end



show_result:
	;PUSH R24
	;PUSH R25
	;PUSH MOTOR_COUnter;


	do_lcd_command 0b00000001 ; clear display
	;do_lcd_command 0b00000110 ; increment, no display shift
	;out PORTC,motor_counter
	ldi lcd_display,lcd_base
	clr r26;result_ten_digit
	clr r27;result_h_digit
minus_100_loop:	
	cpi result_temp,100
	brsh sub_100
show_100_digit:
	cpi r27,1
	brlo minus_10_loop
	load_lcd_data lcd_display
	;rcall sleep_5ms
	ldi lcd_display,lcd_base

minus_10_loop:
	cpi result_temp,10
	brsh sub_10
show_10_digit:
	cpi r26,0
	brne display_10_digit
	cpi r27,1
	brge display_10_digit
	rjmp directly_display
display_10_digit:
	load_lcd_data lcd_display
	;rcall sleep_5ms
	;clr result_digit
	ldi lcd_display,lcd_base


directly_display:	
	ldi lcd_display,lcd_base
	add lcd_display,result_temp
	load_lcd_data lcd_display
	rcall sleep_5ms
	do_lcd_command 0b10101000;CHANGE THE DD RAM ADDRESS
	rjmp lr
sub_10:
	subi result_temp,10
	inc lcd_display
	inc r26
	rjmp minus_10_loop
sub_100:
	subi result_temp,100
	inc lcd_display
	inc r27
	rjmp minus_100_loop
	
Lr:;WHEN THE KEY IS PRESSED
	;pop MOTOR_COUnter
	;POP MCOUNTER_L
	;pop r24
   ret





; LCD control


.equ LCD_RS = 7
.equ LCD_E = 6
.equ LCD_RW = 5
.equ LCD_BE = 4

.macro lcd_set
	sbi PORTA, @0
.endmacro
.macro lcd_clr
	cbi PORTA, @0
.endmacro

;
; Send a command to the LCD (r16)
;

lcd_command:
	out PORTF, r16
	rcall sleep_1ms
	lcd_set LCD_E
	rcall sleep_1ms
	lcd_clr LCD_E
	rcall sleep_1ms
	ret

lcd_data:
	out PORTF, r16
	lcd_set LCD_RS
	rcall sleep_1ms
	lcd_set LCD_E
	rcall sleep_1ms
	lcd_clr LCD_E
	rcall sleep_1ms
	lcd_clr LCD_RS
	ret

lcd_wait:
	push r16
	clr r16
	out DDRF, r16
	out PORTF, r16
	lcd_set LCD_RW
lcd_wait_loop:
	rcall sleep_1ms
	lcd_set LCD_E
	rcall sleep_1ms
	in r16, PINF
	lcd_clr LCD_E
	sbrc r16, 7
	rjmp lcd_wait_loop
	lcd_clr LCD_RW
	ser r16
	out DDRF, r16
	pop r16
	ret

.equ F_CPU = 16000000
.equ DELAY_1MS = F_CPU / 4 / 1000 - 4
; 4 cycles per iteration - setup/call-return overhead

sleep_1ms:
	push r24
	push r25
	ldi r25, high(DELAY_1MS)
	ldi r24, low(DELAY_1MS)
delayloop_1ms:
	sbiw r25:r24, 1
	brne delayloop_1ms
	pop r25
	pop r24
	ret

sleep_5ms:
	rcall sleep_1ms
	rcall sleep_1ms
	rcall sleep_1ms
	rcall sleep_1ms
	rcall sleep_1ms
	ret